<script lang="ts">
import { defineAsyncComponent } from "vue";
const ZDesign = defineAsyncComponent(() => import("../ZDesign/ZDesign.vue"));
const ZMaterialList = defineAsyncComponent(
  () => import("../ZMaterialList/ZMaterialList.vue")
);
const ZArea = defineAsyncComponent(() => import("../ZArea/ZArea.vue"));
const ZDragEditorCanvas = defineAsyncComponent(
  () => import("../ZDragEditorCanvas/ZDragEditorCanvas.vue")
);
const ZToolbar = defineAsyncComponent(() => import("../ZToolbar/ZToolbar.vue"));
const ContextMenu = defineAsyncComponent(
  () => import("../ZContextMenu/ZContextMenu.vue")
);
const ZSplitter = defineAsyncComponent(() => import("../ZSplitter/ZSplitter.vue"));
const ZScaleController = defineAsyncComponent(
  () => import("@/components/ZScaleController/ZScaleController.vue")
);
const ZBtn = defineAsyncComponent(() => import("@/components/ZBtn/ZBtn.vue"));
const ZIcon = defineAsyncComponent(() => import("@/components/ZIcon/ZIcon.vue"));
const ZDrag = defineAsyncComponent(() => import("../ZDrag/ZDrag.vue"));
const ZNode = defineAsyncComponent(() => import("../ZNode/ZNode.vue"));
const ZPage = defineAsyncComponent(() => import("../ZPage/ZPage.vue"));
const ZLines = defineAsyncComponent(() => import("../ZLines/ZLines.vue"));

export default {
  components: {
    ZPage,
    ZDesign,
    ZMaterialList,
    ZArea,
    ZDragEditorCanvas,
    ZToolbar,
    ContextMenu,
    ZSplitter,
    ZScaleController,
    ZBtn,
    ZIcon,
    ZDrag,
    ZNode,
    ZLines,
  },
};
</script>
<script setup lang="ts">
import {
  defineOptions,
  defineModel,
  watch,
  reactive,
  onUnmounted,
  ref,
  withDefaults,
  computed,
  onMounted,
  defineProps,
  provide,
  getCurrentInstance,
  defineExpose,
  nextTick,
} from "vue";
import {
  calculateMousedownPosition,
  serializer,
  getId,
  whetherToMoveInAndOut,
  calculateGroupLayout,
} from "@/common/utils";
import { createCanvas } from "@/common/create";
import type {
  ZDragNode,
  ZDragNodes,
  ZLayout,
  ZCanvasList,
  ZCanvas,
  ZMap,
  ZDragMap,
} from "@/common/type";
import type { ZMenuItem, ZDragEditorProps } from "./type";
defineOptions({
  name: "ZDragEditor",
});

const props = withDefaults(defineProps<ZDragEditorProps>(), {
  canvasExtension: () => ({}),
  splitter: () => ({
    leftHidden: false,
    rightHidden: false,
    leftMinWidth: 200,
    rightMinWidth: 200,
  }),
  menus: () => [
    {
      icon: "design",
      text: "设计",
      name: "design",
      component: "ZDesign",
    },
    {
      icon: "material",
      text: "素材",
      name: "material",
      component: "ZMaterialList",
    },
  ],
});
const selectMenu = ref(props.menus[0]);
const setSelectMenu = (menu: ZMenuItem) => {
  selectMenu.value = menu;
};
const canvases = defineModel<ZDragEditorProps["canvases"]>("canvases", {
  required: true,
});
if (canvases.value.length === 0) {
  canvases.value.push(createCanvas("1-canvas"));
}
const editorCanvasRef = ref<InstanceType<typeof ZDragEditorCanvas> | null>(null);
const selectCanvas = ref<ZCanvas>(canvases.value[0]);
const selectNode = ref<ZDragNode | undefined>();
const treeMap = reactive<ZMap>(new Map());
const dragMap = reactive<ZDragMap>(new Map());
const onDragStart = (fn: () => void) => {
  const instance = getCurrentInstance();
  // console.log(instance);
  if (!instance) throw new Error("instance is not exist");
  const nodeId = instance.attrs["__z-drag-editor-node-id"] as string;
  if (!nodeId) throw new Error("nodeId in instance attrs not found");
  dragMap.set(nodeId, { beforeMove: fn });
};
const onDragMove = (fn: () => void) => {
  const instance = getCurrentInstance();
  if (!instance) throw new Error("instance is not exist");
  const nodeId = instance.attrs["__z-drag-editor-node-id"] as string;
  if (!nodeId) throw new Error("nodeId in instance attrs not found");
  const drag = dragMap.get(nodeId);
  if (drag) drag.moving = fn;
  else dragMap.set(nodeId, { moving: fn });
};
const onDragEnd = (fn: () => void) => {
  const instance = getCurrentInstance();
  if (!instance) throw new Error("instance is not exist");
  const nodeId = instance.attrs["__z-drag-editor-node-id"] as string;
  if (!nodeId) throw new Error("nodeId in instance attrs not found");
  const drag = dragMap.get(nodeId);
  if (drag) drag.afterMove = fn;
  else dragMap.set(nodeId, { afterMove: fn });
};
const beforeMove = (_: MouseEvent) => {
  const drag = dragMap.get(selectNode.value!.id);
  if (!drag) return;
  if (drag.beforeMove) drag.beforeMove(_);
};
const afterMove = (_: MouseEvent) => {
  const parentId = selectNode.value!.parentId as string;
  if (!parentId) return;
  const parent = treeMap.get(parentId)!;
  if (parent.type === "group") {
    parent.layout = {
      ...parent.layout,
      ...calculateGroupLayout(parent.children!),
    };
  }
  const drag = dragMap.get(selectNode.value!.id);
  if (!drag) return;
  if (drag.afterMove) drag.afterMove(_);
};
const moving = (_: MouseEvent) => {
  whetherToMoveInAndOut(selectNode.value!, treeMap, selectCanvas.value);
  const drag = dragMap.get(selectNode.value!.id);
  if (!drag) return;
  if (drag.moving) drag.moving(_);
};
const hijackNodeAxis = computed<ZLayout>({
  get(): ZLayout {
    const defaultValue: ZLayout = {
      x: 0,
      y: 0,
      width: 0,
      height: 0,
      rotate: 0,
      zIndex: 0,
      lock: false,
    };
    if (!selectNode.value) return defaultValue;
    if (selectNode.value && selectNode.value.relative) {
      const relative = selectNode.value.relative;
      const containerId = selectNode.value[relative];
      if (!containerId) return defaultValue;
      if (treeMap.has(containerId) && treeMap.get(containerId)!.type !== "canvas") {
        const container = treeMap.get(containerId)!;
        const hijack = { ...selectNode.value.layout } as ZLayout;
        hijack.x = container.layout.x + hijack.x;
        hijack.y = container.layout.y + hijack.y;
        return hijack;
      } else {
        return selectNode.value.layout;
      }
    }
  },
  set(value: ZLayout) {
    if (!selectNode.value) return;
    if (selectNode.value && selectNode.value.relative) {
      const relative = selectNode.value.relative;
      const containerId = selectNode.value[relative];
      if (!containerId) throw new Error("relative container is not exist");
      if (treeMap.has(containerId) && treeMap.get(containerId)?.type !== "canvas") {
        const container = treeMap.get(containerId)!;
        selectNode.value.layout = {
          ...value,
          x: value.x - container.layout.x,
          y: value.y - container.layout.y,
        };
      } else {
        selectNode.value.layout = {
          ...value,
        };
      }
    }
  },
});
const initTreeMap = (val: ZDragNodes | ZCanvasList, nodeMap: ZMap) => {
  const recursive = (node: ZDragNode | ZCanvas, nodeMap: ZMap) => {
    nodeMap.set(node.id, node);
    if (node.children?.length) {
      node.children.forEach((child) => recursive(child, nodeMap));
    }
  };
  val.forEach((node) => recursive(node, nodeMap));
};
initTreeMap(selectCanvas.value.children, treeMap);
treeMap.set(selectCanvas.value.id, selectCanvas.value);
provide("treeMap", treeMap);
provide("selectCanvas", selectCanvas);
provide("selectNode", selectNode);
provide("onDragStart", onDragStart);
provide("onDragMove", onDragMove);
provide("onDragEnd", onDragEnd);
watch(
  () => selectCanvas.value,
  (val) => {
    if (val) {
      treeMap.clear();
      initTreeMap(selectCanvas.value.children, treeMap);
      treeMap.set(selectCanvas.value.id, selectCanvas.value);
    }
  }
);
const getSelectCanvas = () => {
  return selectCanvas.value;
};
const setSelectCanvas = (canvas: ZCanvas) => {
  selectCanvas.value = canvas;
};
const getSelectNode = () => {
  return selectNode.value;
};

const addNode = (
  event: { clientX: number; clientY: number },
  data: {
    containerId: string;
    container: HTMLElement;
    node: ZDragNode;
  }
) => {
  const { x, y } = calculateMousedownPosition(
    event,
    data.container,
    selectCanvas.value.layout.scale
  );
  const container = treeMap.get(data.containerId);

  if (!container) return;
  const node = { ...data.node };
  node.id = getId();
  const addMode = {
    canvas: () => {
      node.relative = "canvasId";
      node.canvasId = container.id;
      node.layout = {
        ...node.layout,
        x,
        y,
      };
      node.parentId = container.id;
      const children = container.children || [];
      children.push(node);
      container.children = children;
    },
    page: () => {
      node.relative = "pageId";
      node.canvasId = selectCanvas.value.id;
      node.pageId = container.id;
      node.layout = {
        ...node.layout,
        x: x,
        y: y,
      };
      node.parentId = container.id;
      const children = container.children || [];
      children.push(node);
      container.children = children;
    },
  };
  addMode[container.type as keyof typeof addMode]();
  treeMap.set(node.id, node);
};
const removeNode = (node: ZDragNode | ZCanvas) => {
  const recursive = (node: ZDragNode | ZCanvas, nodeMap: ZMap) => {
    nodeMap.delete(node.id);
    if (node.children?.length) {
      node.children.forEach((child) => recursive(child, nodeMap));
    }
  };
  const mode = {
    canvas: () => {
      if (canvases.value.length === 1) return;
      let newCanvasList = canvases.value.filter((i) => i.id !== node.id);
      canvases.value = newCanvasList;
      nextTick(() => {
        if (node.id === selectCanvas.value.id) {
          selectCanvas.value = canvases.value[0];
        }
      });
    },
    page: () => {
      let page = node as ZDragNode;
      if (treeMap.has(page.canvasId!)) {
        let canvas = treeMap.get(page.canvasId!)!;
        let children = canvas.children || [];
        children = children.filter((i) => i.id !== page.id);
        recursive(page, treeMap);
      } else {
        let canvas = canvases.value.find((i) => i.id === page.canvasId!)!;
        let children = canvas.children || [];
        children = children.filter((i) => i.id !== page.id);
      }
    },
  };
  if (mode[node.type as keyof typeof mode]) {
    mode[node.type as keyof typeof mode]();
  } else {
    let com = node as ZDragNode;
    if (treeMap.has(com.canvasId!)) {
      const parent = treeMap.get(com.parentId!)!;
      let children = parent.children || [];
      children = children.filter((i) => i.id !== com.id);
      parent.children = children;
      recursive(node, treeMap);
    } else {
      throw new Error(
        "To delete types other than pages and canvas, canvas must be selected"
      );
    }
  }
};
const canvasDragover = (event: DragEvent) => {
  event.preventDefault();
  event.stopPropagation();
};
const drop = (
  event: DragEvent,
  value?: {
    containerId: string;
    container: HTMLElement;
  }
) => {
  if (!event || !event.dataTransfer) return;
  event.preventDefault();
  event.stopPropagation();
  const dt = event.dataTransfer;
  const node = serializer.deserialize<ZDragNode>(dt.getData("json"));
  const newValue = value ?? {
    containerId: selectCanvas.value.id,
    container: editorCanvasRef.value?.infiniteCanvas as HTMLElement,
  };
  const data = { ...newValue, node };
  addNode(event, data);
};
const setSelectNode = (node?: ZDragNode) => {
  selectNode.value = node;
};
const dblclick = (e: MouseEvent, canvas: HTMLElement) => {
  if (!selectNode.value) return;
  if (!selectNode.value.children || !selectNode.value.children.length) return;
  const axis = calculateMousedownPosition(e, canvas, selectCanvas.value.layout.scale);
  const childrenRects = selectNode.value.children.map((child) => {
    const mode = {
      canvasId: () => {
        return [
          child.layout.x,
          child.layout.y,
          child.layout.x + child.layout.width,
          child.layout.y + child.layout.height,
        ];
      },
      pageId: () => {
        const container = treeMap.get(child.pageId!)!;
        const x = child.layout.x - container.layout.x;
        const y = child.layout.y - container.layout.y;
        return [x, y, x + child.layout.width, y + child.layout.height];
      },
    };
    return {
      id: child.id,
      rect: mode[child.relative as keyof typeof mode](),
    };
  });
  const x = axis.x;
  const y = axis.y;
  const select = childrenRects.find((child) => {
    return (
      child.rect[0] <= x && child.rect[1] <= y && child.rect[2] >= x && child.rect[3] >= y
    );
  });
  if (select) {
    const node = treeMap.get(select.id);
    if (node) {
      setSelectNode(node as ZDragNode);
    }
  }
};
const arrow = () => {
  selectCanvas.value.mode = "select";
};
const drag = () => {
  selectCanvas.value.mode = "drag";
};
onMounted(() => {});
onUnmounted(() => {
  treeMap.clear();
  dragMap.clear();
});
defineExpose({
  dblclick,
  arrow,
  drag,
  setSelectNode,
  canvasDragover,
  addNode,
  getSelectNode,
  setSelectCanvas,
  getSelectCanvas,
  onDragStart,
  onDragMove,
  onDragEnd,
  drop,
  dragMap,
  treeMap,
  initTreeMap,
  selectCanvas,
  selectMenu,
  selectNode,
  setSelectMenu,
  editorCanvasRef,
  hijackNodeAxis,
  removeNode,
});
</script>
<template>
  <article tabindex="0" class="ZDragEditor">
    <template v-if="!$slots.toolbar">
      <ZToolbar class="toolbar">
        <template #left="scope">
          <slot v-if="$slots['toolbar-left']" name="toolbar-left" v-bind="scope"></slot>
          <template v-else>
            <h1 class="z-logo">ZDragEditor</h1>
          </template>
        </template>
        <template #center="scope">
          <slot
            v-if="$slots['toolbar-center']"
            name="toolbar-center"
            v-bind="scope"
          ></slot>
          <template v-else>
            <div class="z-toolbar-center-btns">
              <ZBtn
                @click="arrow"
                :color="selectCanvas.mode === 'select' ? 'text-primary' : 'text-default'"
                :padding="false"
              >
                <ZIcon size="md" name="cursor"></ZIcon>
              </ZBtn>
              <ZBtn
                @click="drag"
                :color="selectCanvas.mode === 'drag' ? 'text-primary' : 'text-default'"
                :padding="false"
              >
                <ZIcon size="sm" name="grab"></ZIcon>
              </ZBtn>
            </div>
          </template>
        </template>
        <template #right="scope">
          <slot v-if="$slots['toolbar-right']" name="toolbar-right" v-bind="scope"></slot>
          <template v-else>
            <ZScaleController v-model="selectCanvas.layout.scale"></ZScaleController>
          </template>
        </template>
      </ZToolbar>
    </template>
    <slot name="toolbar"></slot>
    <div v-if="!$slots.default" class="z-editor-content">
      <ul class="z-editor-menu">
        <li
          v-for="item in menus"
          :key="item.name"
          class="z-editor-menu-item"
          :class="{
            active: selectMenu.name === item.name,
          }"
          @click="setSelectMenu(item)"
        >
          <ZIcon :size="24" class="icon" :name="item.icon"></ZIcon>
          <span class="text">{{ item.text }}</span>
        </li>
      </ul>
      <ZSplitter :right-min-width="230" class="z-splitter">
        <template #left>
          <div v-if="!$slots.left" class="z-left-content">
            <KeepAlive :max="5">
              <component
                v-model:canvases="canvases"
                :treeMap="treeMap"
                v-model:selectCanvas="selectCanvas"
                v-model:selectNode="selectNode"
                :components="components"
                :is="selectMenu.component"
              ></component>
            </KeepAlive>
          </div>
          <slot name="left"></slot>
        </template>
        <template #center>
          <div v-if="!$slots.center" class="z-main-content">
            <ContextMenu>
              <template #default="{ closeMenu }">
                <slot
                  :canvases="canvases"
                  :treeMap="treeMap"
                  :selectCanvas="selectCanvas"
                  :selectNode="selectNode"
                  :components="components"
                  :closeMenu="closeMenu"
                  name="contextMenu"
                ></slot>
              </template>
            </ContextMenu>
            <ZDragEditorCanvas
              v-if="selectCanvas"
              v-model="selectCanvas.layout"
              v-model:mode="selectCanvas.mode"
              v-bind="canvasExtension"
              ref="editorCanvasRef"
              @dragover="canvasDragover"
              @drop="drop"
              @mousedown.stop="setSelectNode()"
            >
              <template #default="{ canvas, wrapper }">
                <template v-if="!renderNode">
                  <ZNode
                    v-for="(node, index) in selectCanvas.children"
                    :key="node.id"
                    v-model="selectCanvas.children[index]"
                    @select="setSelectNode"
                    @mousedown.stop="setSelectNode(selectCanvas.children[index])"
                    @drop="drop"
                  >
                  </ZNode>
                </template>
                <component
                  v-else
                  v-for="(node, index) in selectCanvas.children"
                  :key="node.id"
                  v-model="selectCanvas.children[index]"
                  @select="setSelectNode"
                  @mousedown.stop="setSelectNode(selectCanvas.children[index])"
                  @drop="drop"
                  :is="renderNode"
                ></component>
                <div style="position: absolute; top: 0; left: 0">
                  <ZArea
                    :wrapper="wrapper"
                    :canvas="canvas"
                    :scale="selectCanvas.layout.scale"
                    :nodes="selectCanvas.children"
                    :treeMap="treeMap"
                    :select-canvas="selectCanvas"
                    :select-node="selectNode"
                    :dragMap="dragMap"
                  ></ZArea>
                  <ZDrag
                    v-if="selectNode && canvas"
                    v-model="hijackNodeAxis"
                    position="absolute"
                    @before-move="beforeMove"
                    @after-move="afterMove"
                    @moving="moving"
                    @dblclick="dblclick($event, canvas)"
                    :container="(canvas as HTMLElement)"
                    :scale="selectCanvas.layout.scale"
                    :active="Boolean(selectNode)"
                    :rotate="selectNode.hasRotate"
                  >
                  </ZDrag>
                  <ZLines
                    v-if="selectNode && canvas && wrapper"
                    v-model="hijackNodeAxis"
                    :treeMap="treeMap"
                    :selectCanvas="selectCanvas"
                    :selectNode="selectNode"
                    :wrapper="wrapper"
                  ></ZLines>
                </div>
              </template>
            </ZDragEditorCanvas>
          </div>
          <slot name="center"></slot>
        </template>
        <template #right>
          <slot
            :canvases="canvases"
            :treeMap="treeMap"
            :selectCanvas="selectCanvas"
            :selectNode="selectNode"
            :components="components"
            name="right"
          ></slot>
        </template>
      </ZSplitter>
    </div>
    <slot name="default"></slot>
  </article>
</template>
<style>
@import url("../../var.css");
</style>
<style scoped lang="scss">
.ZDragEditor {
  overflow: hidden;
  box-sizing: border-box;
  .z-editor-content {
    height: calc(100% - 50px);
    display: flex;
    .z-editor-menu {
      width: 50px;
      height: 100%;
      max-height: 100%;
      list-style: none;
      padding: 0;
      padding-top: 8px;
      padding-right: 4px;
      margin: 0;
      border-right: 1px solid rgba(var(--z-quiet));
      box-sizing: border-box;

      .z-editor-menu-item {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        color: var(--z-text);
        margin-bottom: 8px;
        padding: 4px 0;
        position: relative;
        .icon {
          z-index: 1;
        }
        .text {
          font-size: var(--z-font-sm);
          z-index: 1;
        }
        cursor: pointer;
        &::before {
          content: "";
          width: 100%;
          height: 100%;
          position: absolute;
          left: 0;
          border-radius: 0 8px 8px 0;
          transition: transform 0.2s ease-in-out;
          box-shadow: 0px 0px 6px rgba(64, 87, 109, 0.6);
          // box-shadow: 0px 6px 20px -4px rgba(64, 87, 109, 0.3),
          //   0px 0px 0px 1px rgba(64, 87, 109, 0.04);
          // 0px 0px 0px 1px rgba(64, 87, 109, 0.04),
          // rgba(64, 87, 109, 0.3)
          // transition: width 0.2s ease-in-out, height 0.2s ease-in-out;
          transform: scaleX(0);
          transform-origin: left;
        }
        // &:hover {
        // 	&::before {
        // 		transform: scaleX(1);
        // 		background-color: rgba(var(--z-quiet), 0.3);
        // 	}
        // }
        &.active {
          &::before {
            transform: scaleX(1);
            background-color: rgba(var(--z-primary), 1);
          }
          color: rgb(var(--z-text-light));
        }
      }
    }
    .z-splitter {
      width: calc(100% - 50px);
    }
  }
  .z-canvas {
    width: 100%;
    height: 100%;
  }
  .z-toolbar-center-btns {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
  }
  .z-logo {
    margin: 0;
    font-size: var(--z-font-xl);
    padding: 4px 8px;
    &:hover {
      color: rgba(var(--z-primary), 1);
      cursor: pointer;
    }
  }
  .z-left-content {
    // padding: 8px 16px;
    height: 100%;
    width: 100%;
  }
  .z-main-content {
    width: 100%;
    height: 100%;
    overflow: hidden;
  }
  // .z-right-content {
  //   //
  //   height: 100%;
  //   width: 100%;
  //   .text-field-row {
  //     padding: 8px 16px;
  //     display: grid;
  //     grid-template-columns: repeat(3, 1fr);
  //     gap: 4px;
  //     flex-wrap: wrap;
  //     .col {
  //       min-width: 50px;
  //       // width: 33.33%;
  //       font-size: 12px;
  //     }
  //   }
  // }
}
.z-canvas-context-menu {
  list-style: none;
  min-width: 160px;
  padding: 8px 4px;
  margin: 0;
  border: 1px solid rgba(var(--z-quiet), 0.6);
  border-radius: 8px;
  box-shadow: 0px 4px 10px 0px rgba(var(--z-quiet), 0.6);
  background: rgba(var(--z-page), 0.9);
  backdrop-filter: blur(8px);
  .z-canvas-context-menu-item {
    padding: 8px 16px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    color: rgba(var(--z-text), 0.9);
    transition: all 0.2s ease;
    &:hover:not(.disabled) {
      background: rgba(var(--z-primary), 0.1);
      color: rgba(var(--z-primary), 1);
    }
    &.disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    .z-canvas-context-menu-item-icon {
      width: 16px;
      height: 16px;
    }
    .z-canvas-context-menu-item-label {
      font-size: var(--z-font-sm);
      font-family: system-ui;
    }
  }
}
</style>
